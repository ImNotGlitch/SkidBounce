/*
 * SkidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge, Forked from LiquidBounce.
 * https://github.com/ManInMyVan/SkidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.MotionEvent
import net.ccbluex.liquidbounce.event.MoveEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.DisablerMode
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.*
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.vulcan.*
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.Value

object Disabler : Module("Disabler", ModuleCategory.EXPLOIT) {
    private val debug = BoolValue("Debug", false)
    var settings: List<Value<*>> = arrayListOf(debug)
    private val modes = arrayOf(
        VulcanOmniSprint,
        NoTransaction,
        NoKeepAlive,8
        NoSwing,
        NoEntityAction,
        NoAbilities,
        NoDigging,
        Riding,
        NoFlying,
        VulcanAutoBlock,
        GrimFastBreak,
        StormMovement,
        VerusReachB,
    ).sortedBy { it.modeName }
        .onEach { mode ->
            settings += object : BoolValue(mode.modeName, false) {
                override fun onChange(oldValue: Boolean, newValue: Boolean): Boolean {
                    if (state && newValue && !oldValue) mode.onEnable()
                    if (state && !newValue && oldValue) mode.onDisable()
                    return newValue
                }
            }
            mode.settings.onEach { settings += it }
        }

    override fun onEnable() { activeModes.onEach { it.onEnable() } }
    override fun onDisable() { activeModes.onEach { it.onDisable() } }

    @EventTarget(priority = 2)
    fun onPacket(event: PacketEvent) {
        if (!event.isCancelled)
            activeModes.onEach { it.onPacket(event) }
    }
    @EventTarget
    fun onUpdate() { activeModes.onEach { it.onUpdate() } }
    @EventTarget
    fun onMove(event: MoveEvent) { activeModes.onEach { it.onMove(event) } }
    @EventTarget
    fun onMotion(event: MotionEvent) { activeModes.onEach { it.onMotion(event) } }

    private val activeModes: List<DisablerMode>
        get() = modes.filter { mode ->
                values.find { mode.modeName == it.name }!!.get() as Boolean
            }

    val DisablerMode.active
        get() = activeModes.contains(this)

    override val values: List<Value<*>>
        get() = settings

    fun debug(message: String) {
        if (debug.get())
            ClientUtils.displayChatMessage("§7[§cDebug§7]§r $message")
    }
}
